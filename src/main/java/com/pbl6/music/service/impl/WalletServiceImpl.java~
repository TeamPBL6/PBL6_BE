package com.pbl6.music.service.impl;

import com.pbl6.music.dto.request.PurchaseRequest;
import com.pbl6.music.dto.response.PurchaseResponse;
import com.pbl6.music.entity.Music;
import com.pbl6.music.entity.Purchase;
import com.pbl6.music.entity.UserEntity;
import com.pbl6.music.entity.Wallet;
import com.pbl6.music.mapper.PurchaseMapper;
import com.pbl6.music.repository.MusicRepository;
import com.pbl6.music.repository.PurchaseRepository;
import com.pbl6.music.repository.UserRepository;
import com.pbl6.music.repository.WalletRepository;
import com.pbl6.music.service.WalletService;
import jakarta.transaction.Transactional;
import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
public class WalletServiceImpl implements WalletService {
    WalletRepository walletRepository;
    UserRepository userRepository;
    MusicRepository musicRepository;
    PurchaseRepository purchaseRepository;
    @Override
    public Optional<Wallet> getWalletById(Long id) {
        return walletRepository.findById(id);
    }
    public Wallet updateWalletBalance(Long id, BigDecimal amount) {
        Wallet wallet = walletRepository.findById(id).orElseThrow(() -> new RuntimeException("Wallet not found"));
        wallet.setBalance(amount);
        return walletRepository.save(wallet);
    }

    @Override
    @Transactional
    public PurchaseResponse purchaseMusic(PurchaseRequest request) {
        UserEntity buyer = userRepository.findById(request.getUserId())
                .orElseThrow(() -> new RuntimeException("User not found"));
        UserEntity composer = userRepository.findById(request.getComposerId())
                .orElseThrow(() -> new RuntimeException("Composer not found"));

        if (buyer.getWallet().getBalance().compareTo(request.getPrice()) < 0) {
            throw new RuntimeException("Insufficient funds");
        }

        double composerAmount = request.getPrice() * 0.5;
        double buyerAmount = request.getPrice();

        // Cập nhật số dư
        buyer.getWallet().setBalance(buyer.getWallet().getBalance().subtract(BigDecimal.valueOf(buyerAmount)));
        composer.getWallet().setBalance(composer.getWallet().getBalance().add(BigDecimal.valueOf(composerAmount)));

        userRepository.save(buyer);
        userRepository.save(composer);

        // Tạo và trả về PurchaseResponse
        return new PurchaseResponse(buyer.getWallet().getBalance());
    }


}
